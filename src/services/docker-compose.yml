version: '3.8'

networks:
    dockerapi-dev:
        driver: bridge

services:
    # Postgres DB
    postgres_image:
        container_name: 'postgres'
        image: postgres:latest
        environment:
            POSTGRES_PASSWORD: '4y7sV96vA9wv46VR'
            POSTGRES_USER: 'postgres_user'
            POSTGES_DB: 'bouldersDb'
            PGDATA: /data/postgres
        restart: always
        volumes:
            - postgres:/data/postgres
        networks:
            - dockerapi-dev
        ports:
            - 5432:5432
    # Boulder API
    boulder-api:
        image: boulderapi:latest
        container_name: boulder
        depends_on: [postgres_image]
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - PostgreSQL__ConnectionString='server=localhost;port=5432;userid=postgres_user;database=bouldersDb;Password=4y7sV96vA9wv46VR'
        ports:
            - '5088:80'
        networks:
            - dockerapi-dev
    # WebHooks API
    webhooks:
        image: webhooks:latest
        container_name: webhooks
        depends_on: [postgres_image]
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - PostgreSQL__ConnectionString='server=localhost;port=5432;userid=postgres_user;database=bouldersDb;Password=4y7sV96vA9wv46VR'
        ports:
            - '5202:80'
        networks:
            - dockerapi-dev

    # Health Checker
    healthchecks:
        image: webhooks:latest
        container_name: healthchecks
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
        ports:
            - '5202:80'
        networks:
            - dockerapi-dev   

volumes:
    postgres:
